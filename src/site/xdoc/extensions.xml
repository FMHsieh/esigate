<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Extensions</title>
		<author email="nicolas.richeton@gmail.com">Nicolas Richeton</author>
	</properties>
	<body>
		ESIGate 4.0 introduces
		<b>Extensions</b>
		and
		<b>Events</b>
		. These are an easy way to customize ESIGate behavior : remove unused
		features and add user-defined functions.

		<section name="Extensions">
			<p>
				Extensions are simply classes which implement the
				<a href="/esigate-core/apidocs/org/esigate/extension/Extension.html">Extension interface</a>
				.
			</p>
			<p>
				They are loaded at startup by ESIGate according to the "
				<b>extensions</b>
				"
				<a href="/configuration.html">configuration directive</a>
				. Each provider can use a different set of extensions.
			</p>
			<p>
				In the init() method, an extension will usually read configuration
				and
				register to events.
			</p>

		</section>
		<section name="Events">
			<p>Events are hooks on ESIGate's request processing, allowing to
				safely insert custom code at every step.
			</p>
			<p>
				Using this extensions can :
				<ul>

					<li>handle security or login in remote applications by doing more
						http calls to correctly provide credentials when access is
						refused.
					</li>
					<li>alter html content or headers
						before a request result is used or
						even put
						into the cache.
					</li>
					<li>change cache ttl based on urls .</li>
					<li>rewrite links in headers or in the html body.</li>
					<li>update or remove cookies.</li>
					<li>send additional headers to client or to backends.</li>
					<li>cancel requests.</li>
					<li>do custom logging.</li>
					<li>...and much more</li>
				</ul>
			</p>

			<p>
				Extensions can register an
				<a href="/esigate-core/apidocs/org/esigate/events/IEventListener.html">event listener</a>
				to events using the
				<a href="/esigate-core/apidocs/org/esigate/events/EventManager.html">Event Manager</a>
				:
				<code>Driver#getEventManager().register()</code>
			</p>


			<p>
				The following events are supported :

				<ul>
					<li>
						Proxy events : ESIGate process an incoming request (ESIGate
						configured as a
						proxy).
					</li>

					<ul>

						<li> EVENT_PROXY_PRE : before processing an
							incoming
							request.
						</li>

						<li>EVENT_PROXY_POST : after processing an
							incoming
							request.
						</li>

					</ul>

					<li>
						Fragment events : A fragment is required for inclusion
						(esi:include). ESIGate
						will try to use its cache or fallback to
						an
						http call to the
						remote backend.

					</li>
					<ul>

						<li>EVENT_FRAGMENT_PRE : before retrieving
							a fragment.
						</li>

						<li>EVENT_FRAGMENT_POST : after retrieving
							a fragment.
						</li>

					</ul>

					<li>
						Fetch events : An HTTP call is made to a remote backend.
					</li>
					<ul>

						<li>EVENT_FETCH_PRE : before creating the
							HTTP call.
						</li>

						<li>EVENT_FETCH_POST : after we receive
							the response.
						</li>

					</ul>
					<li>

						Render events : Renderers are applied to the current page.
						This
						event can be
						used to inject additional renderers.
					</li>
					<ul>

						<li>EVENT_RENDER_PRE : before applying
							renderers
						</li>

						<li>EVENT_RENDER_POST : after applying
							renderers
						</li>

					</ul>
				</ul>
			</p>
		</section>
		<section name="Available extensions">
			<p>ESIGate comes with several existing extensions :</p>

			<p>
				<ul>
					<li>
						<b>Default</b>
						org.esigate.extension.FetchLogging : log http calls to remote
						backends, including request and response headers
					</li>
					<li>
						<b>Default</b>
						org.esigate.extension.FragmentLogging : log the use of http
						fragments including request and response headers and cache use
						(hit/miss/validated)
					</li>
					<li>
						<b>Default</b>
						org.esigate.extension.ResourceFixup : if enabled by configuration
						directive, rewrites html content to ensure links points directly
						to the remote backend. This should be used when Esigate is
						embedded in an application.
					</li>
					<li>
						<b>Default</b>
						org.esigate.authentication.RemoteUserAuthentificationHandler :
						sends current user id as an http request header (X_REMOTE_USER).
					</li>
					<li>

						org.esigate.authentication.CasAuthentificationHandler :
						handles authentication on CAS SSO.
					</li>
					<li>

						org.esigate.authentication.RequestAuthentificationHandler :
						sends selected session attributes and request attributes as http
						request headers.
					</li>
					<li>

						org.esigate.extension.ForwardOriginalUrl :
						sends original request url as recieved by esigate as http
						request header (X-Esigate-Request).
					</li>
				</ul>
			</p>
			<p>ESIGate users can add custom extensions packaged in a jar or simply compiled classes depending on the way ESIGate is used (standalone server or library).</p>
		</section>
	</body>
</document>