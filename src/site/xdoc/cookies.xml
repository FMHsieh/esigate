<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Cookies</title>
		<author email="francois-xavier.bonnet@centraliens.net">Francois-Xavier Bonnet</author>
	</properties>
	<body>
		<h1>Cookies</h1>
		<section name="Cookie policy and cookie specifications">
			<p>
				ESIGate is designed to behave exactly like any web browser. It
				should accept any cookie coming from provider applications if a
				standard browser accepts them.
			</p>
			<p>
				Cookies are checked against cookie specifications. Note that
				"path" and "domain" attributes are checked against the target server
				name and path. Target Host name means the name specified in the
				"host" header of the request sent to the server. In other words,
				when preserveHost option is set to true, domain must match the
				original server name used by the browser ; when preserveHost is set
				to false, cookie domain must match the server name defined in the
				baseURL parameter in the configuration.
			</p>
		</section>
		<section name="Cookie storing">
			<p>
				By default, cookies sent by the browser are NOT forwarded to
				target applications and cookies sent back by the server are not
				forwarded to the browser : they are kept server side into a the user
				context. Of course, every user has a separate user context.
			</p>
			<p>
				Every driver instance has its own UserContext. Contexts are
				insulated. This means that cookies sent to one provider are not
				shared with other sites, even domain cookie. Just like if we were
				using separate browsers for each provider.
			</p>
			<p>
				As a result, the only cookie viewed from the browser in the
				"jsessionid" corresponding to the user session used by ESIGate to
				store the user context
			</p>
		</section>
		<section name="Cookie forwarding, cookie discarding">
			<p>
				It is possible to configure ESIGate to forward all cookies or
				specific cookies to the browser and also discard all or specific
				cookies. This is done by specifying setting "filter" property to 
                "org.esigate.filter.CookieForwardingFilter" and using the properties
                "forwardCookies" and "discardCookies" in the configuration file.
                Values for these properties should be a coma separated list of cookie
                names or the single value "*".
			</p>
			<p>
				Example 1: forward cookies named "cookie1" and "cookie2", discard
				cookie name "cookie3", all other cookies will be stored server side
				(default behaviour).
				<source>
filter=org.esigate.filter.CookieForwardingFilter
forwardCookies=cookie1,cookie2
discardCookies=cookie3
				</source>
			</p>
			<p>
				Example 2: forward cookies named "cookie1" and "cookie2", discard
				all other cookies.
				<source>
filter=org.esigate.filter.CookieForwardingFilter
forwardCookies=cookie1,cookie2
discardCookies=*
				</source>
			</p>
			<p>Note: if the name of a cookie is present in forwardCookies, it
				takes priority over "*" in discardCookies</p>
			<p>Note: if the name of a cookie is present in discardCookies, it
				takes priority over "*" in forwardCookies</p>
			<p>Note: using value "*" for both forwardCookies and discardCookies
				is not allowed.</p>
			<p>Note: forwarded cookies are not kept server side, they are
				forwarded both ways, server to browser when the header "set-cookie"
				is received, browser to server on every request.</p>
		</section>
		<section name="Cookie rewriting">
			<p>For forwarded cookie, the
				domain and path of the cookie and secure
				or
				not cannot be kept as-is
				because a cookie that would not match its
				originating domain should be
				rejected by the browser.
			</p>
			<p>
				Domain:
				<ul>
					<li>if domain is the server name, it is
						converted to esigate server
						name
						used in the request</li>
					<li>if domain is
						more general domain, esigate tries to converte it
						to a
						domain matching
						the request domain</li>
				</ul>
			</p>
			<p>
				Path:
				<ul>
					<li>the path is rewritten to the biggest matching
						path in the url
					</li>
				</ul>
			</p>
			<p>
				Secure:
				<ul>
					<li>cookie is set secure only if server sent it as
						secure and
						scheme
						is
						https, in all other cases, cookie est set not
						secure when
						sent to
						browser</li>
				</ul>
			</p>
		</section>
	</body>
</document>