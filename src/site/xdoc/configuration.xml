<?xml version="1.0" encoding="UTF-8"?>
<document>
	<properties>
		<title>Configuration</title>
		<author email="francois-xavier.bonnet@centraliens.net">Francois-Xavier Bonnet</author>
	</properties>
	<body>
		<h1>Configuration</h1>
		<section name="Configuration file">
			<p>
				The tools default behavior is to load a configuration file from
				the	classpath /esigate.properties
	</p>
			<p>
				Alternatively you can use method
				<code>org.esigate.DriverFactory.configure(Properties)
				</code>
				.
			</p>
		</section>
		<section name="Configuration directives">
			<table>
				<tr>
					<th>Directive</th>
					<th>Usage</th>
					<th>Mandatory</th>
					<th>Default value</th>
				</tr>
				<tr>
					<td>remoteUrlBase</td>
					<td>
						Base URL of the remote application. Eg:
						<code>remoteUrlBase=http://localhost:8080/provider/
						</code>
						When <a href="clustering.html">clustering</a> (remote application runs on several servers), use a coma-separated list.
					</td>
					<td>No</td>
					<td>-</td>
				</tr>
				<tr>
					<td>uriEncoding</td>
					<td>Charset used for encoding parameters in URI</td>
					<td>No</td>
					<td>ISO-8859-1</td>
				</tr>
                <tr>
                    <td>parsableContentTypes</td>
                    <td>List of parsable content types..  
                    Use this syntax to set content types :                   
                    <code>parsableContentTypes=text/html,application/xhtml+xml,text/plain</code>                    
                    </td>
                    <td>No</td>
                    <td>text/html,application/xhtml+xml</td>
                </tr>
				<tr>
					<td>maxConnectionsPerHost</td>
					<td>Maximum number of HTTP connections simultaneously
						opened with 1 server.</td>
					<td>No</td>
					<td>20</td>
				</tr>
                 <tr>
                    <td>connectTimeout</td>
                    <td>Defines the timeout while trying to establish a connection with the server.</td>
                    <td>No</td>
                    <td>1000</td>
                </tr>
                <tr>
                    <td>socketTimeout</td>
                    <td>Defines the timeout waiting for data once the connection to the server has been opened.</td>
                    <td>No</td>
                    <td>10000</td>
                </tr>
				<tr>
					<td>proxyHost</td>
					<td>Proxy host name or IP. The tool can work through an HTTP
						proxy server.</td>
					<td>No</td>
					<td></td>
				</tr>
				<tr>
					<td>proxyPort</td>
					<td>Proxy port</td>
					<td>No</td>
					<td></td>
				</tr>
				<tr>
					<td>proxyUser</td>
					<td>Username used by the driver for proxy authentication. Leave blank if no authentication is required by the proxy.</td>
					<td>No</td>
					<td></td>
				</tr>
				<tr>
					<td>proxyPassword</td>
					<td>Proxy password</td>
					<td>No</td>
					<td></td>
				</tr>
                <tr>
                    <td>preserveHost</td>
                    <td>Instructs send the request to the target server with the same Host header value as in the incoming request.
                    This feature is very usefull when the target server uses virtual hosts.</td>
                    <td>No</td>
                    <td>false</td>
                </tr>
                <tr>
                    <td>discardRequestHeaders</td>
                    <td>Comma separated list of HTTP request headers which will not be forwarded from client
                    to server. By default, any other request header will be forwarded.
                    See <a href="httpheaders.html">HTTP headers support</a> for more details.
                    </td>
                    <td>No</td>
                    <td>Authorization,Connection,Content-Length,Cache-control,Cookie,Expect,Host,Max-Forwards,Pragma,Proxy-Authorization,TE,Trailer,Transfer-Encoding,Upgrade</td>
                </tr>
                <tr>
                    <td>forwardRequestHeaders</td>
                    <td>Comma separated list of HTTP request headers which are discarded by default but have to be forwarded from client
                    to server.
                    See <a href="httpheaders.html">HTTP headers support</a> for more details.
                    </td>
                    <td>No</td>
                    <td></td>
                </tr>
                <tr>
                    <td>discardResponseHeaders</td>
                    <td>Comma separated list of HTTP request headers which will not be forwarded from server
                    to client . By default, any other response header will be forwarded.
                    See <a href="httpheaders.html">HTTP headers support</a> for more details.
                    </td>
                    <td>No</td>
                    <td>Connection,Content-Length,Content-MD5,Date,Keep-Alive,Proxy-Authenticate,Set-Cookie,Trailer,Transfer-Encoding,WWW-Authenticate</td>
                </tr>
                <tr>
                    <td>forwardResponseHeaders</td>
                    <td>Comma separated list of HTTP response headers which are discarded by default but have to be forwarded from server
                    to client.
                    See <a href="httpheaders.html">HTTP headers support</a> for more details.
                    </td>
                    <td>No</td>
                    <td></td>
                </tr>
                <tr>
                    <td>cookieManager</td>
                    <td>The cookieManager to use. Must be a class that implements org.esigate.cookie.CookieManager</td>
                    <td>No</td>
                    <td>org.esigate.cookie.DefaultCookieManager</td>
                </tr>
                 <tr>
                    <td>discardCookies</td>
                    <td>Comma separated list of the names of the cookies to ignore. By default, cookies are stored in the session on EsiGate side. You can use the value * to discard all cookies.</td>
                    <td>No</td>
                    <td></td>
                </tr>
                 <tr>
                    <td>forwardCookies</td>
                    <td>Comma separated list of the names of the cookies to forward to the client. By default, cookies are stored in the session on EsiGate side. You can use the value * to forward all cookies. Domain and path are rewritten in order to match the domain and path that are visible from the client.</td>
                    <td>No</td>
                    <td></td>
                </tr>
				<tr>
                    <td>fixResources</td>
                    <td>Fix links to resources, images and pages in the pages retrieved (parse the pages to find &lt;a href=...&gt; or &lt;img src=...&gt; ...)</td>
                    <td>No</td>
                    <td>false</td>
                </tr>   
				<tr>
                    <td>fixMode</td>
                    <td>If "relative" the generated URLs will be relative to the root of the server (ie starting with "/"). If "absolute" generated URLs will be absolute (ie starting with "http://")</td>
                    <td>No</td>
                    <td>relative</td>
                </tr>   
				<tr>
                    <td>visibleUrlBase</td>
                    <td>The base URL to use while rewriting URLs for links or resources if different from remoteUrlBase</td>
                    <td>No</td>
                    <td>same value as remoteUrlBase</td>
                </tr>
				<tr>
					<td>remoteUrlBaseStrategy</td>
					<td>
						The strategy to use if load balancing (ie remoteUrlBase has been
						defined as a comma-separated list). Value can be "roundrobin",
						"iphash" or "stickysession". See
						<a href="load-balancing.html">clustering</a>
						for details
					</td>
					<td>No</td>
					<td>roundrobin</td>
				</tr>
               <tr>
                    <td><strike>authenticationHandler</strike></td>
                    <td>This configuration is deprecated and no longer supported. Authentication handlers must now be implemented as extensions. See the <a href="authentication.html">authentication documentation</a> to learn how to use authenticication and upgrade existing custom handlers. </td>
                    <td>No</td>
                    <td></td>
                </tr> 
                   <tr>
                    <td>extensions</td>
                    <td>A comma-separated list of extensions (class names). Extensions can register to events and customize standard behavior, for instance add logging or handle authentication. Extensions will be called in the same order as in this list.</td>
                    <td>No</td>
                    <td>org.esigate.extension.FragmentLogging, org.esigate.extension.FetchLogging, org.esigate.authentication.RemoteUserAuthenticationHandler, org.esigate.extension.ResourceFixup, org.esigate.extension.XPoweredBy</td>
                </tr> 
				<tr>
                    <td><strike>filter</strike></td>
                    <td>Filters are now <b>deprecated</b> and no longer supported. You can get the exact same behavior by turning a filter into an extension.</td>
                    <td>No</td>
                    <td></td>
                </tr>   
 				<tr>
					<td>useCache</td>
					<td>Use the cache</td>
					<td>No</td>
					<td>true</td>
				</tr>
				<tr>
					<td>maxCacheEntries</td>
					<td>Maximum number of entries in the cache (this parameter is only taken into account by the default implementation)</td>
					<td>No</td>
					<td>1000</td>
				</tr>
				<tr>
					<td>maxObjectSize</td>
					<td>Maximum size of a cache entry (bytes). If 0, no size limit.
						This
						directive can be used to avoid excessive memory usage</td>
					<td>No</td>
					<td>1000000</td>
				</tr>
				<tr>
					<td>cacheStorage</td>
					<td>
						Implementation of org.esigate.cache.CacheStorage to use. It can be one
						of these values:
						<ul>
							<li>org.esigate.cache.BasicCacheStorage</li>
							<li>org.esigate.cache.EhcacheCacheStorage</li>
							<li>org.esigate.cache.MemcachedCacheStorage</li>
						</ul>
					</td>
					<td>No</td>
					<td>org.esigate.cache.BasicCacheStorage</td>
				</tr>
				<tr>
					<td>xCacheHeader</td>
					<td>Activates X-Cache header in HTTP responses (usefull to debug cache)</td>
					<td>No</td>
					<td>false</td>
				</tr>
				<tr>
					<td>ttl</td>
					<td>Time to live (seconds) of any cached page. If 0, cache expiration
						will be calculated automatically depending on http response headers.
						If set to a non-zero value, the value will apply for all GET requests ignoring any Cache-control header!</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>heuristicCachingEnabled</td>
					<td>Heuristic caching enabled (see <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">Caching in HTTP</a>)</td>
					<td>No</td>
					<td>true</td>
				</tr>
				<tr>
					<td>heuristicCoefficient</td>
					<td>Heuristic coefficient.</td>
					<td>No</td>
					<td>0.1</td>
				</tr>
				<tr>
					<td>heuristicDefaultLifetimeSecs</td>
					<td>Default lifetime of a cache entry if there is absolutely no information about it the http headers.</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>staleWhileRevalidate</td>
					<td>If non 0, when we receive a request for which an entry is in the cache but this entry is stale, we will send immediately the stale cache entry and try to update it from the server for next time. The value indicates the maximum staleness of the cache entry. This strategy can reduce a lot the load on the target server as there is only 1 refresh request for a cache entry at the same time.</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>staleIfError</td>
					<td>If non 0, when we receive an error from the target server, we will try to use the corresponding cache entry even if it is stale. The value indicates the maximum staleness of the cache entry.</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>minAsynchronousWorkers</td>
					<td>Minimum number of threads processing background revalidations.</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>maxAsynchronousWorkers</td>
					<td>Maximum number of threads processing background revalidations. Set this parameter to 0 in order to deactivate background revalidation.</td>
					<td>No</td>
					<td>0</td>
				</tr>
				<tr>
					<td>asynchronousWorkerIdleLifetimeSecs</td>
					<td>Maximum idle lifetime for a background revalidation thread before it gets reclaimed.</td>
					<td>No</td>
					<td>60</td>
				</tr>
				<tr>
					<td>maxUpdateRetries</td>
					<td>number of retries on a failed cache update.</td>
					<td>No</td>
					<td>1</td>
				</tr>
				<tr>
					<td>revalidationQueueSize</td>
					<td>Maximum number of requests in the revalidation queue.</td>
					<td>No</td>
					<td></td>
				</tr>
				<tr>
					<td>ehcache.cacheName</td>
					<td>Name of the EhCache</td>
					<td>No</td>
					<td>esigate</td>
				</tr>
				<tr>
					<td>ehcache.configurationFile</td>
					<td>Xml configuration file for EhCache (loaded via the classloader of the application).</td>
					<td>No</td>
					<td>/ehcache.xml</td>
				</tr>
				<tr>
					<td>memcached.servers</td>
					<td>Comma separated list of MemCached servers and ports. Syntax: server1:port1,server2:port2</td>
					<td>No</td>
					<td></td>
				</tr>
			</table>

		</section>
		<section name="Specifying several provider applications">
			<p>
				You can specify several provider applications prefixing directives
				with the provider name.
				Note: "default" application is the application used when later you use
				tags without specifying the application, the other ones are called "appli1"
				and "appli2":
			</p>
<source>
# Common settings
uriEncoding=UTF-8

# Default application
default.remoteUrlBase=http://localhost:8080/appli0/

# appli1 application
appli1.remoteUrlBase=http://localhost:8080/appli1/
appli1.uriEncoding=ISO-8859-1

# appli2 application
appli2.remoteUrlBase=http://localhost:8080/appli2/
</source>
		</section>

                <section name="Variables resolver">
			<p>
				You can define variables in
				classpath esigate-vars.properties
                                </p>
<source>
variable_name=variable_value
someUrl=/cms/article123
</source>
                                <p>
                                Those variables can be used in page attribute of <a href="taglib.html">tags</a> includeBlock,includeTemplate and includeBase or in <a href="aggregator.html#Including_a_block">aggregator</a>.
                                The syntax for using a variable is $(variable_name) and is fixed by the standard <a href="http://www.w3.org/TR/esi-lang">ESI</a>.
                                </p>
                                                       

		</section>

	</body>
</document>